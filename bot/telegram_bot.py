import logging
import requests
import threading
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# Bot token
tg_bot_token = '6434288276:AAFNXls4-YKX2t5hmlP1mDmAmv4fp99t7I0'

# API base URL - –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Flask
API_BASE_URL = "http://localhost:5000"

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Store active chat sessions and admin chat
ACTIVE_CHATS = {}  # {session_id: {user_name, last_message_time}}
ADMIN_CHAT_ID = None
application = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Waste Management Platform.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/setchat - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∞–π—Ç–∞\n"
        "/chats - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç-—Å–µ—Å—Å–∏–π\n"
    )

async def set_admin_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set the current chat as the admin chat"""
    global ADMIN_CHAT_ID
    ADMIN_CHAT_ID = update.effective_chat.id
    await update.message.reply_text(f"–≠—Ç–æ—Ç —á–∞—Ç (ID: {ADMIN_CHAT_ID}) —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∞–π—Ç–∞.")

async def list_active_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all active chat sessions"""
    if not ACTIVE_CHATS:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç-—Å–µ—Å—Å–∏–π.")
        return
    
    keyboard = []
    for session_id, data in ACTIVE_CHATS.items():
        user_name = data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        last_time = data.get('last_message_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        button_text = f"{user_name} - {last_time}"
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"chat_session:{session_id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç-—Å–µ—Å—Å–∏–∏:", reply_markup=reply_markup)

async def select_chat_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle selection of a chat session"""
    # ...existing code...

async def handle_support_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle replies to user messages"""
    # ...existing code...

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def message_polling_thread():
    """Run message polling in a separate thread"""
    global application, ADMIN_CHAT_ID, ACTIVE_CHATS
    
    logger.info("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    while True:
        try:
            if ADMIN_CHAT_ID and application:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                response = requests.get(f"{API_BASE_URL}/api/chat/pending-messages")
                
                if response.status_code == 200:
                    data = response.json()
                    messages = data.get('messages', [])
                    
                    for msg in messages:
                        session_id = msg.get('sessionId')
                        user_name = msg.get('userName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        text = msg.get('text', '')
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
                        ACTIVE_CHATS[session_id] = {
                            'user_name': user_name,
                            'last_message_time': '–°–µ–π—á–∞—Å'
                        }
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        formatted_message = (
                            f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {user_name}\n"
                            f"ID —Å–µ—Å—Å–∏–∏: {session_id}\n"
                            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n"
                            f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                        )
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        async def send_message_to_admin():
                            sent_message = await application.bot.send_message(
                                chat_id=ADMIN_CHAT_ID,
                                text=formatted_message
                            )
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ session_id
                            application.bot_data[f"reply_{sent_message.message_id}"] = session_id
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                        application.create_task(send_message_to_admin())
                        
                        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
                        requests.post(
                            f"{API_BASE_URL}/api/chat/mark-delivered",
                            json={"messageId": msg.get('id')}
                        )
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            time.sleep(5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            time.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ

def main():
    """Start the bot."""
    global application
    
    # Create the Application
    application = Application.builder().token(tg_bot_token).build()

    # Register handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setchat", set_admin_chat))
    application.add_handler(CommandHandler("chats", list_active_chats))
    
    # Handler for messages sent in reply to user messages
    application.add_handler(MessageHandler(
        filters.REPLY & filters.TEXT & ~filters.COMMAND, 
        handle_support_reply
    ))
    
    # Handler for chat session selection via inline buttons
    application.add_handler(CallbackQueryHandler(select_chat_session, pattern=r"^chat_session:"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ event loop
    polling_thread = threading.Thread(target=message_polling_thread, daemon=True)
    polling_thread.start()
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # Start the Bot with polling (—ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
    application.run_polling()
    
if __name__ == "__main__":
    main()