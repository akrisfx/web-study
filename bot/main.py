import asyncio
import logging
import requests
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# Bot token
tg_bot_token = '6434288276:AAFNXls4-YKX2t5hmlP1mDmAmv4fp99t7I0'

# API base URL - –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Flask
API_BASE_URL = "http://localhost:5000"

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Store active chat sessions and admin chat
ACTIVE_CHATS = {}  # {session_id: {user_name, last_message_time}}
ADMIN_CHAT_ID = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Waste Management Platform.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/setchat - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∞–π—Ç–∞\n"
        "/chats - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç-—Å–µ—Å—Å–∏–π\n"
    )

async def set_admin_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set the current chat as the admin chat"""
    global ADMIN_CHAT_ID
    ADMIN_CHAT_ID = update.effective_chat.id
    await update.message.reply_text(f"–≠—Ç–æ—Ç —á–∞—Ç (ID: {ADMIN_CHAT_ID}) —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∞–π—Ç–∞.")

async def list_active_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all active chat sessions"""
    if not ACTIVE_CHATS:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç-—Å–µ—Å—Å–∏–π.")
        return
    
    keyboard = []
    for session_id, data in ACTIVE_CHATS.items():
        user_name = data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        last_time = data.get('last_message_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        button_text = f"{user_name} - {last_time}"
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"chat_session:{session_id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç-—Å–µ—Å—Å–∏–∏:", reply_markup=reply_markup)

async def select_chat_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle selection of a chat session"""
    query = update.callback_query
    await query.answer()
    
    session_id = query.data.split(':')[1]
    if session_id in ACTIVE_CHATS:
        chat_data = ACTIVE_CHATS[session_id]
        user_name = chat_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        try:
            response = requests.get(f"{API_BASE_URL}/api/chat/history?sessionId={session_id}&limit=5")
            if response.status_code == 200:
                data = response.json()
                messages = data.get('messages', [])
                
                if not messages:
                    await query.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
                
                message_text = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name} (–°–µ—Å—Å–∏—è: {session_id}):\n\n"
                for msg in messages:
                    sender = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.get('from') == 'user' else "üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
                    time_str = msg.get('timestamp', 0)
                    message_text += f"{sender}: {msg.get('text')}\n\n"
                
                message_text += "\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ
                sent_message = await query.message.reply_text(message_text)
                context.bot_data[f"reply_{sent_message.message_id}"] = session_id
                
            else:
                await query.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞. –°—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
    else:
        await query.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")

async def handle_support_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle replies to user messages"""
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω session_id
    replied_to_message_id = message.reply_to_message.message_id if message.reply_to_message else None
    session_id = context.bot_data.get(f"reply_{replied_to_message_id}")
    
    if not session_id:
        await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫ –∫–∞–∫–æ–π —á–∞—Ç-—Å–µ—Å—Å–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—Ç–≤–µ—Ç.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ API –≤–µ–±-—á–∞—Ç–∞
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/chat/message",
            json={
                "sessionId": session_id,
                "from": "support",
                "text": message.text,
                "supportName": update.effective_user.username or "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
            }
        )
        if response.status_code == 200:
            await message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        else:
            await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

async def check_new_messages(context: ContextTypes.DEFAULT_TYPE):
    """Check for new messages from the website chat"""
    global ACTIVE_CHATS
    
    if not ADMIN_CHAT_ID:
        return
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/chat/pending-messages")
        if response.status_code == 200:
            data = response.json()
            messages = data.get('messages', [])
            
            for msg in messages:
                session_id = msg.get('sessionId')
                user_name = msg.get('userName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                text = msg.get('text', '')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
                ACTIVE_CHATS[session_id] = {
                    'user_name': user_name,
                    'last_message_time': '–°–µ–π—á–∞—Å'
                }
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                formatted_message = (
                    f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {user_name}\n"
                    f"ID —Å–µ—Å—Å–∏–∏: {session_id}\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n"
                    f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                )
                
                sent_message = await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=formatted_message
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
                context.bot_data[f"reply_{sent_message.message_id}"] = session_id
                
                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
                requests.post(
                    f"{API_BASE_URL}/api/chat/mark-delivered",
                    json={"messageId": msg.get('id')}
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

def main():
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(tg_bot_token).build()

    # Register handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setchat", set_admin_chat))
    application.add_handler(CommandHandler("chats", list_active_chats))
    
    # Handler for messages sent in reply to user messages
    application.add_handler(MessageHandler(
        filters.REPLY & filters.TEXT & ~filters.COMMAND, 
        handle_support_reply
    ))
    
    # Handler for chat session selection via inline buttons
    application.add_handler(CallbackQueryHandler(select_chat_session, pattern=r"^chat_session:"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ job_queue –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π asyncio –∑–∞–¥–∞—á–∏
    # –≠—Ç–∞ –æ–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º PTB –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    application.job_queue.run_repeating(check_new_messages, interval=5)
    
    # Start the Bot with polling (—ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
    application.run_polling()
    
if __name__ == "__main__":
    main()  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ asyncio.run(), —Ç–∞–∫ –∫–∞–∫ PTB —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop

